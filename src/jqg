#!/usr/bin/env bash

#***************************************************************************
#*** jqg - search, flatten, unflatten, and extract JSON using JQ
#*** Copyright 2021 Joseph Casadonte
#***************************************************************************
#*** Licensed under the Apache License, Version 2.0 (the "License");
#*** you may not use this file except in compliance with the License.
#*** You may obtain a copy of the License at
#***
#*** http://www.apache.org/licenses/LICENSE-2.0
#***
#*** Unless required by applicable law or agreed to in writing, software
#*** distributed under the License is distributed on an "AS IS" BASIS,
#*** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#*** See the License for the specific language governing permissions and
#*** limitations under the License.
#***************************************************************************
#*** project URL: https://github.com/NorthboundTrain/jqg
#***************************************************************************

main() {
    exit_code_nomatch=1
    exit_code_error=2
    exit_code_usage=0;

    #***** parse command line options *****
    #----- process $JQ_OPTS before those typed in -----
    local JQG_OPTS_ARRAY
    read -ra JQG_OPTS_ARRAY <<< "$JQG_OPTS"

    local short_options="sfuxt:T:X:UiIkvaKVAeErRnNj:Jq:Qdh"
    local long_options="search,flatten,unflatten,extract,output:,input:"
    long_options="$long_options,composite_extract:,composite_unflatten,ignore_case,match_case"
    long_options="$long_options,searchkeys,searchvalues,searchall,keys,values,all"
    long_options="$long_options,include_empty,exclude_empty,raw,json,join:,join_alt,join_char:,join_colon"
    long_options="$long_options,empty_results_ok,results_required"
    long_options="$long_options,jqopt:,clear,debug,version,help,bug"

    _getopt=$(pgetopt --options $short_options --long $long_options --name 'jqg' -- "${JQG_OPTS_ARRAY[@]}" "$@"); grc=$?
    if [[ $grc != 0 ]] ; then echo "Terminating..." >&2 ; exit $exit_code_error ; fi

    eval set -- "$_getopt"

    #***** release version *****
    local jqg_version="v1.3.2"

    #***** determine JQ binary *****
    local jq_bin=${JQ_BIN:-jq}

    #***** set default options *****
    mode=search
    ignore_case=true
    search_loc=all
    preserve_empty_elements=true
    post_process_filter=none
    jq_raw=false
    require_results=false

    join_char="."
    alt_join_char=":"

    jqflags=()

    input_transformation=flatten
    output_transformation=none

    declare -A show_deprecated_warnings

    #***** finish processing the options *****
    while true; do
        case "$1" in
    # major modes
            -s | --search )    mode=search;    input_transformation=flatten;
                               output_transformation=none; shift ;;

            # deprecated
            -f | --flatten )   mode=search;    input_transformation=flatten;
                               output_transformation=none; show_deprecated_warnings[flatten]="true"; shift ;;

            -u | --unflatten ) mode=unflatten; input_transformation=none;
                               output_transformation=none; shift ;;

            -x | --extract )   mode=extract;   input_transformation=unflatten;
                               output_transformation=none;
                               unset pre_extract; shift ;;

    # mode: all
            -t | --output ) output_transformation="$2"; shift 2;;
            -T | --input )  input_transformation="$2";  shift 2;;

    # special combos modes
            -X | --composite_extract )   mode=search; input_transformation=extract;
                                         output_transformation=none; pre_extract=$2;
                                         shift 2 ;;

            -U | --composite_unflatten ) mode=search; input_transformation=flatten;
                                         output_transformation=unflatten;
                                         shift ;;

    # mode: search
            -i | --ignore_case ) ignore_case=true;  shift ;;
            -I | --match_case )  ignore_case=false; shift ;;

    # mode: search
            -k | --searchkeys )   search_loc=keys;   shift ;;
            -v | --searchvalues ) search_loc=values; shift ;;
            -a | --searchall )    search_loc=all;    shift ;;

    # mode: all (meant for flattened output only)
            -K | --keys )   post_process_filter=keys_only;   shift ;;
            -V | --values ) post_process_filter=values_only; shift ;;
            -A | --all )    post_process_filter=none;        shift ;;

    # flatten filter options
            -e | --include_empty ) preserve_empty_elements=true;  shift ;;
            -E | --exclude_empty ) preserve_empty_elements=false; shift ;;

    # with flattened output
            -r | --raw ) jq_raw=true;   shift ;;
            -R | --json ) jq_raw=false; shift ;;

    # mode: search
            -n | --empty_results_ok ) require_results=false; shift ;;
            -N | --results_required ) require_results=true;  shift ;;

    # with flattened output / unflattened input
            -j | --join )       join_char="$2"; shift 2 ;;
            -J | --join_alt )   join_char="$alt_join_char";  shift ;;
                 --join_char )  alt_join_char="$2"; shift 2 ;;
            # deprecated
                 --join_colon ) join_char=":"; show_deprecated_warnings[colon]="true"; shift ;;

    # mode: all
            -q | --jqopt ) jqflags+=( "$2" ); shift 2 ;;
            -Q | --clear ) jqflags=();        shift ;;

    # mode: all
            -d | --debug ) debug=true; shift ;;

                 --version )
                    echo "$jqg_version"
                    exit $exit_code_usage
                    ;;

            -h | --help )
                    echo
                    echo "usage: jqg [-s|-U|-X <SELECTOR>] [-i|-I] [-a|-k|-v] [-A|-K|-V] [-e|-E] [-r|-R] [-j=<CHAR>|-J] [FILE|CRITERIA|CRITERIA FILE]"
                    echo "usage: jqg -u [-j=<CHAR>|-J] [FILE]"
                    echo "usage: jqg -x <SELECTOR> [FILE]"
                    echo "   (common)   [-t flatten|unflatten|none] [-T flatten|unflatten|extract|none] [-n|-N] [-q <JQ OPT>] [-Q] [-d]"
                    echo
                    echo "special usage: jqu ==> jqg -U (implies -s) "
                    echo "special usage: jqx ==> jqg -X (implies -s) "
                    echo
                    echo "usage: jqg --bug"
                    echo "usage: jqg (-h|--help)"
                    echo
                    echo "Full man page at: docs/jqg.md or https://github.com/NorthboundTrain/jqg/blob/main/docs/jqg.md"
                    echo "usage: jqg (-h|--help)"

                    exit $exit_code_usage
                    ;;

            --bug )
                    echo
                    echo
                    echo "You can log a bug by going to: "
                    echo
                    echo "  https://github.com/NorthboundTrain/jqg/issues"
                    echo
                    echo
                    echo "Please include the following information in your bug report:"
                    echo
                    echo "JQG: $jqg_version"
                    echo "JQ: $($jq_bin --version)"
                    echo "BASH: $SHELL -- $BASH_VERSION"
                    echo "\$JQG_OPTS: $JQG_OPTS"
                    echo "\$JQ_BIN: $JQ_BIN"
                    echo
                    echo

                    exit $exit_code_usage
                    ;;

            -- ) shift; break ;;
            * ) break ;;
        esac
    done

    #***** grab criteria and/or filename *****
    #----- [filename|criteria|criteria filename]
    arg1=$1; shift
    arg2=$1; shift

    if [[ -n "$arg2" ]]; then
        criteria=$arg1
        filename=$arg2
    elif [[ -n "$arg1" ]]; then
        if [[ -f "$arg1" ]]; then
            criteria="."
            filename=$arg1
        else
            criteria=$arg1
            filename=
        fi
    else
        criteria="."
        filename=
    fi

    #***** special case: criteria *****
    if [[ "$criteria" == "." ]]; then
        case "$mode" in
            search | extract ) mode=none ;;
        esac
    else
        case "$mode" in
            flatten ) criteria=. ;;
        esac
    fi

    #***** special case: filename *****
    : "${filename:=/dev/stdin}"

    #***** construct the filter *****
    declare -a filter_list
    declare -A filter_def_added
    jq_filter=

    #---- expected input -----
    case "$input_transformation" in
        flatten   ) add_flatten_filter_def ;;
        unflatten ) add_unflatten_filter_def ;;
        extract   ) add_unflatten_filter_def;
                    add_extract_filter_def;
                    add_flatten_filter_def ;;
        none      ) ;; # do nothing
        * ) echo "[ERROR] unknown input_transformation: [[ $input_transformation ]]" >&2; exit $exit_code_error ;;
    esac

    #----- mode filter -----
    case "$mode" in
        search    ) add_search_filter_def ;;
        extract   ) add_extract_filter_def ;;
        unflatten ) add_unflatten_filter_def ;;
        none      ) ;; # do nothing
        * ) echo "[ERROR] unknown mode: [[ $mode ]]" >&2; exit $exit_code_error ;;
    esac

    #---- expected output -----
    case "$output_transformation" in
        flatten )   add_flatten_filter_def ;;
        unflatten ) add_unflatten_filter_def ;;
        none ) ;; # do nothing
        * ) echo "[ERROR] unknown output_transformation: [[ $output_transformation ]]" >&2; exit $exit_code_error ;;
    esac

    #----- possibly count the results -----
    add_require_results_filter_def

    #----- possibly add post-process the output -----
    add_post_process_filter_def

    #----- add the list of filters -----
    add_filter_list_pipeline

    #----- if all of the above results in nothing, use JQ Identity filter (.) -----
    if [[ -z "$jq_filter" ]]; then
        jq_filter=.
    fi

    #***** deal with JQ's -r argument *****
    local raw_arg
    case "$jq_raw" in
        true )  raw_arg="-r" ;;
        false ) raw_arg= ;;
    esac

    #***** possibly print out deprecation message *****
    if [[ ${#show_deprecated_warnings[*]} -gt 0 ]]; then
        for key in "${!show_deprecated_warnings[@]}"
        do
            if [[ "$key" == "flatten" ]]; then
                echo >&2
                echo "[WARNING] The use of the command line arguments \"-f\" and \"--flatten\" are" >&2
                echo "          deprecated; they will be removed in a future release. Please switch" >&2
                echo "          to using \"-s\" or \"--search\"." >&2
                echo >&2
            elif [[ "$key" == "colon" ]]; then
                echo >&2
                echo "[WARNING] The use of the command line argument \"--join_colon\" is" >&2
                echo "          deprecated; it will be removed in a future release. Please switch" >&2
                echo "          to using \"-J\", \"--join_alt\", or \"--join_char\"." >&2
                echo >&2
            else
                echo "[ERROR] unknown deprecation warning key: [[ $key ]]" >&2
                exit $exit_code_error
            fi
        done

    fi

    #***** debug output *****
    if [[ "$debug" == "true" ]]; then
        echo "CMDLINE: \"$jq_bin\"${raw_arg:+ \"$raw_arg\"} " "${jqflags[@]}" " \"<FILTER>\" < \"$filename\""
        echo
        echo "FILTER:"
        echo "$jq_filter"
        echo

        exit $exit_code_usage
    fi

    #***** execute the command *****
    "$jq_bin"${raw_arg:+ "$raw_arg"} "${jqflags[@]}" "$jq_filter" < "$filename"
    rc=$?

    exit $rc
}

#***************************************************************************
add_flatten_filter_def()
{
    #----- always add to list of filters -----
    filter_list+=( "flatten_json" );

    #----- only add definition once -----
    if [[ -z "${filter_def_added[flatten]+exists}" ]]; then
        local empty_tests
        case "$preserve_empty_elements" in
            true )  empty_tests="empty_leafs";;
            false ) empty_tests="false" ;;
        esac

        read -r -d '' jq_filter <<EOF
$jq_filter

def empty_leafs:
    select(tostring | . == "{}" or . == "[]");

def flatten_json:
    . as \$data |
    [ path(.. | select((scalars|tostring), $empty_tests)) ] |
    map({ (map(tostring) | join("$join_char")) : (. as \$path | . = \$data | getpath(\$path)) }) |
    reduce .[] as \$item ({ }; . + \$item);
EOF

        #------ do not add again in the future -----
        filter_def_added[flatten]+="done"
    fi

}

#***************************************************************************
add_unflatten_filter_def()
{
    #----- always add to list of filters -----
    filter_list+=( "unflatten_json" );

    #----- only add definition once -----
    if [[ -z "${filter_def_added[unflatten]+exists}" ]]; then
        read -r -d '' jq_filter <<EOF
$jq_filter

def unflatten_json:
    reduce to_entries[] as \$entry
        (null; setpath(\$entry.key | tostring / "$join_char" | map(tonumber? // .); \$entry.value));
EOF

        #------ do not add again in the future -----
        filter_def_added[unflatten]+="done"
    fi
}

#***************************************************************************
add_search_filter_def()
{
    #----- always add to list of filters -----
    filter_list+=( "search_filter" );

    #----- only add definition once -----
    if [[ -z "${filter_def_added[search]+exists}" ]]; then
        local case_regex
        case "$ignore_case" in
            true  ) case_regex=i ;;
            false ) case_regex= ;;
        esac

        local search_elem
        case "$search_loc" in
            keys )   search_elem=".key" ;;
            values ) search_elem=".value" ;;
            all )    search_elem=".[]" ;;
        esac

        read -r -d '' jq_filter <<EOF
$jq_filter

def search_filter:
    to_entries |
    map(select($search_elem | tostring | test("${criteria//\\/\\\\}"; "${case_regex}"))) |
    from_entries;
EOF

        #------ do not add again in the future -----
        filter_def_added[search]+="done"
    fi
}

#***************************************************************************
add_require_results_filter_def()
{
    #----- short-circuit -----
    if [[ "$require_results" != "true" ]]; then
        return
    fi

    #----- always add to list of filters -----
    filter_list+=( "require_results" );

    #----- only add definition once -----
    if [[ -z "${filter_def_added[require_results]+exists}" ]]; then
        read -r -d '' jq_filter <<EOF
$jq_filter

def require_results:
    if length > 0 then . else (. = "" | halt_error($exit_code_nomatch)) end;
EOF

        #------ do not add again in the future -----
        filter_def_added[require_results]+="done"
    fi
}

#***************************************************************************
add_extract_filter_def()
{
    #----- always add to list of filters -----
    filter_list+=( "extract_json" );

# to return {} or [] instead of null:
#   . as \$orig | reduce(...) // (\$orig | if type == "array" then [] else {} end);

    #----- only add definition once -----
    if [[ -z "${filter_def_added[extract]+exists}" ]]; then
        read -r -d '' jq_filter <<EOF
$jq_filter

def extract_json:
  reduce (
    path(${pre_extract:-$criteria}) as \$selector_path | tostream |
        select(length > 1 and (.[0] | index(\$selector_path) == 0))
    ) as \$selected ( null; setpath(\$selected[0]; \$selected[1]) );
EOF

        #------ do not add again in the future -----
        filter_def_added[extract]+="done"
    fi
}

#***************************************************************************
add_post_process_filter_def()
{
    #----- short-circuit -----
    if [[ "$post_process_filter" == "none" ]]; then
        return
    fi

    #----- always add to list of filters -----
    filter_list+=( "post_process_output" );

    #----- only add definition once -----
    if [[ -z "${filter_def_added[post_process]+exists}" ]]; then
        local output_filter
        case "$post_process_filter" in
            keys_only )   output_filter='keys_unsorted' ;;
            values_only ) output_filter='[ .[] ]' ;;
        esac

        local strip_array
        case "$jq_raw" in
            true )  strip_array=".[]" ;;
            false ) strip_array="." ;;
        esac

        read -r -d '' jq_filter <<EOF
$jq_filter

def post_process_output:
    $output_filter | $strip_array;
EOF

        #------ do not add again in the future -----
        filter_def_added[post_process]+="done"
    fi
}

#***************************************************************************
add_filter_list_pipeline()
{
    local all_filters="${filter_list[*]}"
    read -r -d '' jq_filter <<EOF
$jq_filter

${all_filters// / | }
EOF
}

#***************************************************************************
# spellcheck:start-ignore-block
pgetopt() {
  # pure-getopt, a drop-in replacement for GNU getopt in pure Bash.
  # version 1.4.5
  #
  # Copyright 2012-2021 Aron Griffis <aron@scampersand.com>
  #
  # Permission is hereby granted, free of charge, to any person obtaining
  # a copy of this software and associated documentation files (the
  # "Software"), to deal in the Software without restriction, including
  # without limitation the rights to use, copy, modify, merge, publish,
  # distribute, sublicense, and/or sell copies of the Software, and to
  # permit persons to whom the Software is furnished to do so, subject to
  # the following conditions:
  #
  # The above copyright notice and this permission notice shall be included
  # in all copies or substantial portions of the Software.
  #
  # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  # OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  # MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  # IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  # CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  # TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  # SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  _getopt_main() {
    # Returns one of the following statuses:
    #   0 success
    #   1 error parsing parameters
    #   2 error in getopt invocation
    #   3 internal error
    #   4 reserved for -T
    #
    # For statuses 0 and 1, generates normalized and shell-quoted
    # "options -- parameters" on stdout.

    declare parsed status
    declare short long='' name flags=''
    declare have_short=false

    # Synopsis from getopt man-page:
    #
    #   getopt optstring parameters
    #   getopt [options] [--] optstring parameters
    #   getopt [options] -o|--options optstring [options] [--] parameters
    #
    # The first form can be normalized to the third form which
    # _getopt_parse() understands. The second form can be recognized after
    # first parse when $short hasn't been set.

    if [[ -n ${GETOPT_COMPATIBLE+isset} || $1 == [^-]* ]]; then
      # Enable compatibility mode
      flags=c$flags
      # Normalize first to third synopsis form
      set -- -o "$1" -- "${@:2}"
    fi

    # First parse always uses flags=p since getopt always parses its own
    # arguments effectively in this mode.
    parsed=$(_getopt_parse getopt ahl:n:o:qQs:TuV \
      alternative,help,longoptions:,name:,options:,quiet,quiet-output,shell:,test,version \
      p "$@")
    status=$?
    if [[ $status != 0 ]]; then
      if [[ $status == 1 ]]; then
        echo "Try 'getopt --help' for more information." >&2
        # Since this is the first parse, convert status 1 to 2
        status=2
      fi
      return $status
    fi
    eval "set -- $parsed"

    while [[ $# -gt 0 ]]; do
      case $1 in
        (-a|--alternative)
          flags=a$flags ;;

        (-h|--help)
          _getopt_help
          return 0
          ;;

        (-l|--longoptions)
          long="$long${long:+,}$2"
          shift ;;

        (-n|--name)
          name=$2
          shift ;;

        (-o|--options)
          short=$2
          have_short=true
          shift ;;

        (-q|--quiet)
          flags=q$flags ;;

        (-Q|--quiet-output)
          flags=Q$flags ;;

        (-s|--shell)
          case $2 in
            (sh|bash)
              flags=${flags//t/} ;;
            (csh|tcsh)
              flags=t$flags ;;
            (*)
              echo 'getopt: unknown shell after -s or --shell argument' >&2
              echo "Try 'getopt --help' for more information." >&2
              return 2 ;;
          esac
          shift ;;

        (-u|--unquoted)
          flags=u$flags ;;

        (-T|--test)
          return 4 ;;

        (-V|--version)
          echo "pure-getopt 1.4.4"
          return 0 ;;

        (--)
          shift
          break ;;
      esac

      shift
    done

    if ! $have_short; then
      # $short was declared but never set, not even to an empty string.
      # This implies the second form in the synopsis.
      if [[ $# == 0 ]]; then
        echo 'getopt: missing optstring argument' >&2
        echo "Try 'getopt --help' for more information." >&2
        return 2
      fi
      short=$1
      have_short=true
      shift
    fi

    if [[ $short == -* ]]; then
      # Leading dash means generate output in place rather than reordering,
      # unless we're already in compatibility mode.
      [[ $flags == *c* ]] || flags=i$flags
      short=${short#?}
    elif [[ $short == +* ]]; then
      # Leading plus means POSIXLY_CORRECT, unless we're already in
      # compatibility mode.
      [[ $flags == *c* ]] || flags=p$flags
      short=${short#?}
    fi

    # This should fire if POSIXLY_CORRECT is in the environment, even if
    # it's an empty string.  That's the difference between :+ and +
    flags=${POSIXLY_CORRECT+p}$flags

    _getopt_parse "${name:-getopt}" "$short" "$long" "$flags" "$@"
  }

  _getopt_parse() {
    # Inner getopt parser, used for both first parse and second parse.
    # Returns 0 for success, 1 for error parsing, 3 for internal error.
    # In the case of status 1, still generates stdout with whatever could
    # be parsed.
    #
    # $flags is a string of characters with the following meanings:
    #   a - alternative parsing mode
    #   c - GETOPT_COMPATIBLE
    #   i - generate output in place rather than reordering
    #   p - POSIXLY_CORRECT
    #   q - disable error reporting
    #   Q - disable normal output
    #   t - quote for csh/tcsh
    #   u - unquoted output

    declare name="$1" short="$2" long="$3" flags="$4"
    shift 4

    # Split $long on commas, prepend double-dashes, strip colons;
    # for use with _getopt_resolve_abbrev
    declare -a longarr
    _getopt_split longarr "$long"
    longarr=( "${longarr[@]/#/--}" )
    longarr=( "${longarr[@]%:}" )
    longarr=( "${longarr[@]%:}" )

    # Parse and collect options and parameters
    declare -a opts params
    declare o alt_recycled=false error=0

    while [[ $# -gt 0 ]]; do
      case $1 in
        (--)
          params=( "${params[@]}" "${@:2}" )
          break ;;

        (--*=*)
          o=${1%%=*}
          if ! o=$(_getopt_resolve_abbrev "$o" "${longarr[@]}"); then
            error=1
          elif [[ ,"$long", == *,"${o#--}"::,* ]]; then
            opts=( "${opts[@]}" "$o" "${1#*=}" )
          elif [[ ,"$long", == *,"${o#--}":,* ]]; then
            opts=( "${opts[@]}" "$o" "${1#*=}" )
          elif [[ ,"$long", == *,"${o#--}",* ]]; then
            if $alt_recycled; then o=${o#-}; fi
            _getopt_err "$name: option '$o' doesn't allow an argument"
            error=1
          else
            echo "getopt: assertion failed (1)" >&2
            return 3
          fi
          alt_recycled=false
          ;;

        (--?*)
          o=$1
          if ! o=$(_getopt_resolve_abbrev "$o" "${longarr[@]}"); then
            error=1
          elif [[ ,"$long", == *,"${o#--}",* ]]; then
            opts=( "${opts[@]}" "$o" )
          elif [[ ,"$long", == *,"${o#--}::",* ]]; then
            opts=( "${opts[@]}" "$o" '' )
          elif [[ ,"$long", == *,"${o#--}:",* ]]; then
            if [[ $# -ge 2 ]]; then
              shift
              opts=( "${opts[@]}" "$o" "$1" )
            else
              if $alt_recycled; then o=${o#-}; fi
              _getopt_err "$name: option '$o' requires an argument"
              error=1
            fi
          else
            echo "getopt: assertion failed (2)" >&2
            return 3
          fi
          alt_recycled=false
          ;;

        (-*)
          if [[ $flags == *a* ]]; then
            # Alternative parsing mode!
            # Try to handle as a long option if any of the following apply:
            #  1. There's an equals sign in the mix -x=3 or -xy=3
            #  2. There's 2+ letters and an abbreviated long match -xy
            #  3. There's a single letter and an exact long match
            #  4. There's a single letter and no short match
            o=${1::2} # temp for testing #4
            if [[ $1 == *=* || $1 == -?? || \
                  ,$long, == *,"${1#-}"[:,]* || \
                  ,$short, != *,"${o#-}"[:,]* ]]; then
              o=$(_getopt_resolve_abbrev "${1%%=*}" "${longarr[@]}" 2>/dev/null)
              case $? in
                (0)
                  # Unambiguous match. Let the long options parser handle
                  # it, with a flag to get the right error message.
                  set -- "-$1" "${@:2}"
                  alt_recycled=true
                  continue ;;
                (1)
                  # Ambiguous match, generate error and continue.
                  _getopt_resolve_abbrev "${1%%=*}" "${longarr[@]}" >/dev/null
                  error=1
                  shift
                  continue ;;
                (2)
                  # No match, fall through to single-character check.
                  true ;;
                (*)
                  echo "getopt: assertion failed (3)" >&2
                  return 3 ;;
              esac
            fi
          fi

          o=${1::2}
          if [[ "$short" == *"${o#-}"::* ]]; then
            if [[ ${#1} -gt 2 ]]; then
              opts=( "${opts[@]}" "$o" "${1:2}" )
            else
              opts=( "${opts[@]}" "$o" '' )
            fi
          elif [[ "$short" == *"${o#-}":* ]]; then
            if [[ ${#1} -gt 2 ]]; then
              opts=( "${opts[@]}" "$o" "${1:2}" )
            elif [[ $# -ge 2 ]]; then
              shift
              opts=( "${opts[@]}" "$o" "$1" )
            else
              _getopt_err "$name: option requires an argument -- '${o#-}'"
              error=1
            fi
          elif [[ "$short" == *"${o#-}"* ]]; then
            opts=( "${opts[@]}" "$o" )
            if [[ ${#1} -gt 2 ]]; then
              set -- "$o" "-${1:2}" "${@:2}"
            fi
          else
            if [[ $flags == *a* ]]; then
              # Alternative parsing mode! Report on the entire failed
              # option. GNU includes =value but we omit it for sanity with
              # very long values.
              _getopt_err "$name: unrecognized option '${1%%=*}'"
            else
              _getopt_err "$name: invalid option -- '${o#-}'"
              if [[ ${#1} -gt 2 ]]; then
                set -- "$o" "-${1:2}" "${@:2}"
              fi
            fi
            error=1
          fi ;;

        (*)
          # GNU getopt in-place mode (leading dash on short options)
          # overrides POSIXLY_CORRECT
          if [[ $flags == *i* ]]; then
            opts=( "${opts[@]}" "$1" )
          elif [[ $flags == *p* ]]; then
            params=( "${params[@]}" "$@" )
            break
          else
            params=( "${params[@]}" "$1" )
          fi
      esac

      shift
    done

    if [[ $flags == *Q* ]]; then
      true  # generate no output
    else
      echo -n ' '
      if [[ $flags == *[cu]* ]]; then
        printf '%s -- %s' "${opts[*]}" "${params[*]}"
      else
        if [[ $flags == *t* ]]; then
          _getopt_quote_csh "${opts[@]}" -- "${params[@]}"
        else
          _getopt_quote "${opts[@]}" -- "${params[@]}"
        fi
      fi
      echo
    fi

    return $error
  }

  _getopt_err() {
    if [[ $flags != *q* ]]; then
      printf '%s\n' "$1" >&2
    fi
  }

  _getopt_resolve_abbrev() {
    # Resolves an abbrevation from a list of possibilities.
    # If the abbreviation is unambiguous, echoes the expansion on stdout
    # and returns 0.  If the abbreviation is ambiguous, prints a message on
    # stderr and returns 1. (For first parse this should convert to exit
    # status 2.)  If there is no match at all, prints a message on stderr
    # and returns 2.
    declare a q="$1"
    declare -a matches=()
    shift
    for a; do
      if [[ $q == "$a" ]]; then
        # Exact match. Squash any other partial matches.
        matches=( "$a" )
        break
      elif [[ $flags == *a* && $q == -[^-]* && $a == -"$q" ]]; then
        # Exact alternative match. Squash any other partial matches.
        matches=( "$a" )
        break
      elif [[ $a == "$q"* ]]; then
        # Abbreviated match.
        matches=( "${matches[@]}" "$a" )
      elif [[ $flags == *a* && $q == -[^-]* && $a == -"$q"* ]]; then
        # Abbreviated alternative match.
        matches=( "${matches[@]}" "${a#-}" )
      fi
    done
    case ${#matches[@]} in
      (0)
        [[ $flags == *q* ]] || \
        printf "$name: unrecognized option %s\\n" >&2 \
          "$(_getopt_quote "$q")"
        return 2 ;;
      (1)
        printf '%s' "${matches[0]}"; return 0 ;;
      (*)
        [[ $flags == *q* ]] || \
        printf "$name: option %s is ambiguous; possibilities: %s\\n" >&2 \
          "$(_getopt_quote "$q")" "$(_getopt_quote "${matches[@]}")"
        return 1 ;;
    esac
  }

  _getopt_split() {
    # Splits $2 at commas to build array specified by $1
    declare IFS=,
    eval "$1=( \$2 )"
  }

  _getopt_quote() {
    # Quotes arguments with single quotes, escaping inner single quotes
    declare s space='' q=\'
    for s; do
      printf "$space'%s'" "${s//$q/$q\\$q$q}"
      space=' '
    done
  }

  _getopt_quote_csh() {
    # Quotes arguments with single quotes, escaping inner single quotes,
    # bangs, backslashes and newlines
    declare s i c space
    for s; do
      echo -n "$space'"
      for ((i=0; i<${#s}; i++)); do
        c=${s:i:1}
        case $c in
          (\\|\'|!)
            echo -n "'\\$c'" ;;
          ($'\n')
            echo -n "\\$c" ;;
          (*)
            echo -n "$c" ;;
        esac
      done
      echo -n \'
      space=' '
    done
  }

  _getopt_help() {
    cat <<-EOT

	Usage:
	 getopt <optstring> <parameters>
	 getopt [options] [--] <optstring> <parameters>
	 getopt [options] -o|--options <optstring> [options] [--] <parameters>

	Parse command options.

	Options:
	 -a, --alternative             allow long options starting with single -
	 -l, --longoptions <longopts>  the long options to be recognized
	 -n, --name <progname>         the name under which errors are reported
	 -o, --options <optstring>     the short options to be recognized
	 -q, --quiet                   disable error reporting by getopt(3)
	 -Q, --quiet-output            no normal output
	 -s, --shell <shell>           set quoting conventions to those of <shell>
	 -T, --test                    test for getopt(1) version
	 -u, --unquoted                do not quote the output

	 -h, --help                    display this help
	 -V, --version                 display version

	For more details see getopt(1).
	EOT
  }

  _getopt_version_check() {
    if [[ -z $BASH_VERSION ]]; then
      echo "getopt: unknown version of bash might not be compatible" >&2
      return 1
    fi

    # This is a lexical comparison that should be sufficient forever.
    if [[ $BASH_VERSION < 2.05b ]]; then
      echo "getopt: bash $BASH_VERSION might not be compatible" >&2
      return 1
    fi

    return 0
  }

  _getopt_version_check
  _getopt_main "$@"
  declare status=$?
  unset -f _getopt_main _getopt_err _getopt_parse _getopt_quote \
    _getopt_quote_csh _getopt_resolve_abbrev _getopt_split _getopt_help \
    _getopt_version_check
  return $status
}
# spellcheck:end-ignore-block

# The test here distinguishes script execution from "source script.sh" which
# will define the functions without calling main, for calling functions from
# another script or testing at the command-line.
[[ ${BASH_SOURCE[0]} != "$0" ]] || main "$@"

#***************************************************************************
#*****  EOF  *****  EOF  *****  EOF  *****  EOF  *****  EOF  ***************
